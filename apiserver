#!/usr/bin/env node

const express = require('express');
const bodyParser = require('body-parser');
const mongoose = require('mongoose');
const cors = require('cors');
const dotenv = require('dotenv');
const path = require('path');
const swaggerUi = require('swagger-ui-express');
const swaggerJsdoc = require('swagger-jsdoc');

// Load environment variables
dotenv.config();

const app = express();
const PORT = process.env.PORT || 8000;
const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://localhost:27017/competency-framework';

// Swagger configuration
const swaggerOptions = {
    definition: {
        openapi: '3.0.0',
        info: {
            title: 'Competency Framework API',
            version: '1.0.0',
            description: 'API for managing competency frameworks, definitions, and rubrics',
        },
        servers: [
            {
                url: 'http://localhost:8000',
                description: 'Development server',
            },
        ],
        components: {
            schemas: {
                CompetencyFramework: {
                    type: 'object',
                    properties: {
                        name: { type: 'string' },
                        description: { type: 'string' },
                        version: { type: 'string' },
                        competencyDefinitions: {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    }
                },
                CompetencyDefinition: {
                    type: 'object',
                    properties: {
                        title: { type: 'string' },
                        description: { type: 'string' },
                        category: { type: 'string' },
                        abbreviation: { type: 'string' },
                        competencyGroup: { type: 'string' },
                        framework: { type: 'string' },
                        criteria: {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    }
                },
                RubricCriterion: {
                    type: 'object',
                    properties: {
                        name: { type: 'string' },
                        description: { type: 'string' },
                        levels: {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    }
                },
                RubricCriterionLevel: {
                    type: 'object',
                    properties: {
                        level: { type: 'number' },
                        name: { type: 'string' },
                        description: { type: 'string' },
                        examples: {
                            type: 'array',
                            items: { type: 'string' }
                        }
                    }
                },
                // CASE 1.1 Data Models
                CFItem: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        uri: { type: 'string' },
                        title: { type: 'string' },
                        fullStatement: { type: 'string' },
                        alternativeLabel: { type: 'string' },
                        CFItemType: { type: 'string' },
                        CFItemTypeURI: { type: 'string' },
                        notes: { type: 'string' },
                        lastChangeDateTime: { type: 'string', format: 'date-time' },
                        CFDocumentURI: { type: 'string' },
                        creators: { 
                            type: 'array',
                            items: { type: 'string' }
                        },
                        extensions: { 
                            type: 'object',
                            additionalProperties: true
                        }
                    }
                },
                CFDocument: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        uri: { type: 'string' },
                        title: { type: 'string' },
                        description: { type: 'string' },
                        creator: { type: 'string' },
                        publisher: { type: 'string' },
                        CFPackageURI: { type: 'string' },
                        version: { type: 'string' },
                        lastChangeDateTime: { type: 'string', format: 'date-time' },
                        officialSourceURL: { type: 'string' },
                        extensions: { 
                            type: 'object',
                            additionalProperties: true
                        }
                    }
                },
                CFAssociation: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        associationType: { type: 'string' },
                        sourceNodeURI: { type: 'string' },
                        targetNodeURI: { type: 'string' },
                        CFDocumentURI: { type: 'string' },
                        lastChangeDateTime: { type: 'string', format: 'date-time' },
                        originNodeURI: { type: 'string' }
                    }
                },
                CFRubric: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        title: { type: 'string' },
                        description: { type: 'string' },
                        CFDocumentURI: { type: 'string' },
                        rubricCriteria: {
                            type: 'array',
                            items: { 
                                type: 'object',
                                $ref: '#/components/schemas/CFRubricCriterion'
                            }
                        }
                    }
                },
                CFRubricCriterion: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        rubricId: { type: 'string' },
                        category: { type: 'string' },
                        description: { type: 'string' },
                        CFItemURI: { type: 'string' },
                        weight: { type: 'number' },
                        position: { type: 'integer' },
                        rubricCriterionLevels: {
                            type: 'array',
                            items: { 
                                type: 'object',
                                $ref: '#/components/schemas/CFRubricCriterionLevel'
                            }
                        }
                    }
                },
                CFRubricCriterionLevel: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        rubricCriterionId: { type: 'string' },
                        level: { type: 'integer' },
                        description: { type: 'string' },
                        quality: { type: 'string' },
                        score: { type: 'number' },
                        feedback: { type: 'string' }
                    }
                },
                CFPackage: {
                    type: 'object',
                    properties: {
                        identifier: { type: 'string' },
                        uri: { type: 'string' },
                        creator: { type: 'string' },
                        title: { type: 'string' },
                        lastChangeDateTime: { type: 'string', format: 'date-time' },
                        CFDocument: { 
                            type: 'object',
                            $ref: '#/components/schemas/CFDocument'
                        },
                        CFItems: { 
                            type: 'array',
                            items: { 
                                type: 'object',
                                $ref: '#/components/schemas/CFItem'
                            }
                        },
                        CFAssociations: { 
                            type: 'array',
                            items: { 
                                type: 'object',
                                $ref: '#/components/schemas/CFAssociation'
                            }
                        },
                        CFRubrics: { 
                            type: 'array',
                            items: { 
                                type: 'object',
                                $ref: '#/components/schemas/CFRubric'
                            }
                        },
                        CFDefinitions: { 
                            type: 'object',
                            properties: {
                                CFConcepts: { type: 'array', items: { type: 'object' } },
                                CFSubjects: { type: 'array', items: { type: 'object' } },
                                CFLicenses: { type: 'array', items: { type: 'object' } },
                                CFItemTypes: { type: 'array', items: { type: 'object' } },
                                CFAssociationGroupings: { type: 'array', items: { type: 'object' } }
                            }
                        },
                        extensions: { 
                            type: 'object',
                            additionalProperties: true
                        }
                    }
                }
            }
        }
    },
    apis: ['./routes/*.js'],
};

const swaggerSpecs = swaggerJsdoc(swaggerOptions);

// Configure CORS
const corsOptions = {
  origin: process.env.CORS_ORIGIN || '*',
  optionsSuccessStatus: 200
};

// Middleware
app.use(cors(corsOptions));
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Serve static files from public directory
app.use(express.static(path.join(__dirname, 'public')));

// Serve Swagger documentation
app.use('/api-docs', swaggerUi.serve, swaggerUi.setup(swaggerSpecs));

// Request logging middleware
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.originalUrl}`);
  next();
});

// Database connection
mongoose.connect(MONGODB_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true
})
.then(() => console.log('Connected to MongoDB'))
.catch(err => console.error('Could not connect to MongoDB', err));

// Import routes
const competencyFrameworkRoutes = require('./routes/competencyFramework');
const competencyDefinitionRoutes = require('./routes/competencyDefinition');
const resourceAssociationRoutes = require('./routes/resourceAssociation');
const rubricRoutes = require('./routes/rubric');
const rubricCriterionRoutes = require('./routes/rubricCriterion');
const rubricCriterionLevelRoutes = require('./routes/rubricCriterionLevel');
const uploadRoutes = require('./routes/uploadRoute');
const caseViewRoutes = require('./routes/caseView');

// Use routes
app.use('/api/frameworks', competencyFrameworkRoutes);
app.use('/api/definitions', competencyDefinitionRoutes);
app.use('/api/associations', resourceAssociationRoutes);
app.use('/api/rubrics', rubricRoutes);
app.use('/api/criteria', rubricCriterionRoutes);
app.use('/api/levels', rubricCriterionLevelRoutes);
app.use('/api', uploadRoutes);
app.use('/api/case', caseViewRoutes);

// Root endpoint - serve the frontend UI
app.get('/', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// API base endpoint
app.get('/api', (req, res) => {
  res.json({
    message: 'Welcome to the Competency Framework API',
    documentation: '/api-docs',
    endpoints: {
      frameworks: '/api/frameworks',
      definitions: '/api/definitions',
      associations: '/api/associations',
      rubrics: '/api/rubrics',
      criteria: '/api/criteria',
      levels: '/api/levels',
      case: '/api/case'
    }
  });
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).json({
    message: 'Something went wrong!',
    error: process.env.NODE_ENV === 'production' ? {} : err
  });
});

// Handle 404 routes
app.use((req, res) => {
  res.status(404).json({ message: 'Route not found' });
});

// Start server
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
  console.log(`API available at http://localhost:${PORT}/api`);
  console.log(`UI available at http://localhost:${PORT}`);
  console.log(`Swagger documentation available at http://localhost:${PORT}/api-docs`);
});
